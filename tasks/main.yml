---
- name: set network_name variable from tezos_network
  set_fact:
    network_name: "{{ tezos_network | basename }}"

- name: change node and client directory names
  set_fact:
    node_rpc_url: "{% if node_rpc_url is defined %}{{ node_rpc_url }}{% else %}http://{{ network_name }}_node:{{ rpc_port_internal }}{% endif %}"

- name: node data directories
  file:
    dest: "{{ item }}"
    state: directory
    owner: "1000"
    mode: 0777
  with_items:
    - "{{ node_data_dir }}"
    - "{{ client_data_dir }}"

- name: check if a tezos-node config.json exists
  stat:
    path: "{{ node_data_dir }}/config.json"
  register: has_config

- name: render tezos tezos-node config file from "{{ tezos_node_config_template }}"
  when: tezos_node_config_template is defined and not has_config.stat.exists
  template:
    src: "{{ tezos_node_config_template }}"
    dest: "{{ node_data_dir }}/config.json"
    owner: "100"
    mode: 0755

- name: create docker network
  docker_network:
    name: "{{ network_name }}"

- name: Docker Volume Container
  docker_container:
    name: "{{ network_name }}_node_volumes"
    image: "{{ tezos_docker_image }}"
    state: present
    entrypoint: '/bin/true'
    volumes:
      - "{{ node_data_dir }}:/home/tezos/.tezos-node"
      - "{{ client_data_dir }}:/home/tezos/.tezos-client"

- name: generate tezos-node config "{{ network_name }}"
  when:  not has_config.stat.exists and tezos_node_config_template is undefined
  docker_container:
    name: init_tezos_node_config
    image: "{{ tezos_docker_image }}"
    detach: no
    cleanup: yes
    entrypoint: tezos-node
    command: >-
      config init
        --network {{ tezos_network }}
    volumes_from:
      - "{{ network_name }}_node_volumes"

- name: check if an identity exists
  stat:
    path: "{{ node_data_dir }}/identity.json"
  register: has_identity

- name: generate identity (Can take several minutes)
  docker_container:
    name: identity_generate
    image: "{{ tezos_docker_image }}"
    detach: no
    cleanup: yes
    entrypoint: tezos-node
    command: identity generate
    volumes_from:
      - "{{ network_name }}_node_volumes"
  when: not has_identity.stat.exists

- name: import Tezos snapshot
  include: snapshot_import.yml
  when: snapshot_url is defined

- name: run tezos node
  docker_container:
    name: "{{ network_name }}_node"
    image: "{{ tezos_docker_image }}"
    restart_policy: always
    ports:
      - "{{ rpc_port }}:{{ rpc_port_internal }}"
      - "{{ p2p_port }}:{{ p2p_port_internal }}"
      - "{{ octez_metrics_port }}:{{ octez_metrics_port_internal }}"
    networks:
      - name: "{{ network_name }}"
    entrypoint: tezos-node
    command: >-
      run
        --rpc-addr 0.0.0.0:{{ rpc_port_internal }}
        --allow-all-rpc 0.0.0.0:{{ rpc_port_internal }}
        --history-mode "{{ history_mode }}"
        --cors-origin "*"
        --cors-header "Content-Type"
        {{ tezos_docker_image is match("tezos/tezos:(v13.*|master_.*)") | ternary("--metrics-addr=0.0.0.0:9932", "") }}
        {{ tezos_node_additional_parameters | join(' ') }}
    env: "{{ tezos_node_env_variables }}"
    volumes_from:
      - "{{ network_name }}_node_volumes"

- name: deploy tezos_exporter side car
  docker_container:
    name: "tezos_exporter"
    image: "{{ tezos_exporter_docker_image }}"
    restart_policy: always
    command: >
      -tezos-node-url {{ node_rpc_url }}
      -bootstraped-poll-interval 10s
      -bootstraped-threshold 8
    ports:
      - 9489:9489
    networks:
      - name: "{{ network_name }}"

- name: check if an tezos-client config.json exists
  stat:
    path: "{{ client_data_dir }}/config"
  register: has_client_config

- name: generate tezos-client config "{{ network_name }}"
  when:  not has_client_config.stat.exists
  docker_container:
    name: init_tezos_client_config
    image: "{{ tezos_docker_image }}"
    detach: no
    cleanup: yes
    entrypoint: tezos-client
    command: >
      --endpoint {{ node_rpc_url }}
      config init
    networks:
      - name: "{{ network_name }}"
    volumes_from:
      - "{{ network_name }}_node_volumes"
